name: RDP Hyper Optimized BR

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
    - name: Enable RDP + Disable NLA
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
          -Name "fDenyTSConnections" -Value 0 -Force
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
          -Name "UserAuthentication" -Value 0 -Force
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
          -Name "SecurityLayer" -Value 0 -Force
        netsh advfirewall firewall add rule name="RDP-Allow" dir=in action=allow protocol=TCP localport=3389
        Restart-Service -Name TermService -Force

    - name: Create Autologin User
      run: |
        $username = "RDP"
        $password = "882188Adr"
        net user $username $password /add
        net localgroup administrators $username /add
        net localgroup "Remote Desktop Users" $username /add
        
        # Ativar autologin
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon" `
          -Name "AutoAdminLogon" -Value "1" -Type String
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon" `
          -Name "DefaultUserName" -Value $username -Type String
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon" `
          -Name "DefaultPassword" -Value $password -Type String

    - name: Configure Locale and Timezone (Brazil)
      run: |
        # Definir idioma, teclado e regi√£o para PT-BR
        Set-WinSystemLocale -SystemLocale pt-BR
        Set-WinUserLanguageList -LanguageList pt-BR -Force
        Set-WinUILanguageOverride -Language pt-BR
        Set-WinCultureFromLanguageListOptOut -OptOut 0
        
        # Fuso hor√°rio de Bras√≠lia (GMT-3)
        Set-TimeZone -Id "E. South America Standard Time"
        
        # Configurar teclado ABNT2
        $LangList = New-WinUserLanguageList pt-BR
        $LangList[0].InputMethodTips.Add("0416:00010416")
        Set-WinUserLanguageList $LangList -Force

    - name: Install NVIDIA GPU Drivers
      run: |
        $url = "https://us.download.nvidia.com/Windows/536.23/536.23-desktop-win10-win11-64bit-international-dch-whql.exe"
        $driver = "$env:TEMP\nvidia_driver.exe"
        Invoke-WebRequest -Uri $url -OutFile $driver
        Start-Process -FilePath $driver -ArgumentList "-s","-noreboot" -Wait
        Remove-Item $driver -Force

    - name: Install Visual Studio Code Automatic
      run: |
        $vscodeUrl = "https://code.visualstudio.com/sha/download?build=stable&os=win32-x64"
        $installerPath = "$env:TEMP\vscode.exe"
        Invoke-WebRequest -Uri $vscodeUrl -OutFile $installerPath
        Start-Process -FilePath $installerPath -ArgumentList "/SILENT", "/MERGETASKS=!runcode" -Wait
        Remove-Item $installerPath -Force

    - name: Ultra Optimize Windows Performance for RDP
      run: |
        # Otimiza√ß√µes espec√≠ficas para RDP
        reg add "HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server" /v "MaxInstanceCount" /t REG_DWORD /d 4294967295 /f
        
        # Desativar anima√ß√µes e efeitos visuais
        reg add "HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects" /v VisualFXSetting /t REG_DWORD /d 2 /f
        Set-ItemProperty "HKCU:\Control Panel\Desktop" -Name "UserPreferencesMask" -Value ([byte[]](0x90,0x12,0x03,0x80))
        Set-ItemProperty "HKCU:\Control Panel\Desktop" -Name "MenuShowDelay" -Value "0"
        Set-ItemProperty "HKCU:\Control Panel\Desktop" -Name "WaitToKillAppTimeout" -Value "2000"
        Set-ItemProperty "HKCU:\Control Panel\Desktop" -Name "HungAppTimeout" -Value "1000"
        
        # Desativar transpar√™ncias e efeitos
        reg add "HKCU\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize" /v EnableTransparency /t REG_DWORD /d 0 /f
        reg add "HKCU\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize" /v ColorPrevalence /t REG_DWORD /d 0 /f
        
        # Otimizar para performance
        reg add "HKLM\SYSTEM\CurrentControlSet\Control\FileSystem" /v "NtfsDisableLastAccessUpdate" /t REG_DWORD /d 1 /f
        reg add "HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management" /v "DisablePagingExecutive" /t REG_DWORD /d 1 /f
        
        # Desativar servi√ßos desnecess√°rios
        $services = @("DiagTrack", "WSearch", "Spooler", "TabletInputService", "XboxGipSvc", "XboxNetApiSvc")
        foreach ($service in $services) {
            Stop-Service -Name $service -Force -ErrorAction SilentlyContinue
            Set-Service -Name $service -StartupType Disabled -ErrorAction SilentlyContinue
        }
        
        # Otimizar power plan para performance
        powercfg -setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c

    - name: Create Access Point System for RDP User
      run: |
        # Criar diret√≥rio do usu√°rio RDP se n√£o existir
        New-Item -ItemType Directory -Force -Path "C:\Users\RDP\AppData\Local\Temp"
        
        # Script para criar ponto de acesso
        $scriptContent = @'
        `$sleepTime = 120  # 2 minutos
        while (`$true) {
            try {
                `$tsIP = & "`$env:ProgramFiles\Tailscale\tailscale.exe" ip -4 2>`$null
                if (`$tsIP) {
                    `$content = "RDP Access Information `nIP: `$tsIP `nUsername: RDP `nPassword: 882188Adr `nUpdated: `$(Get-Date)"
                    `$downloadsPath = [System.Environment]::GetFolderPath('UserProfile') + "\Downloads\RDP_Access.txt"
                    `$content | Out-File -FilePath `$downloadsPath -Encoding utf8
                }
            } catch {
                # Ignora erros e continua
            }
            Start-Sleep -Seconds `$sleepTime
        }
'@
        # Salvar script
        $scriptContent | Out-File -FilePath "C:\Users\RDP\AppData\Local\Temp\access_point.ps1" -Encoding utf8
        
        # Criar tarefa agendada
        $action = New-ScheduledTaskAction -Execute "PowerShell.exe" -Argument "-WindowStyle Hidden -File `"C:\Users\RDP\AppData\Local\Temp\access_point.ps1`""
        $trigger = New-ScheduledTaskTrigger -AtStartup
        $settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable
        Register-ScheduledTask -TaskName "RDPAccessPoint" -Action $action -Trigger $trigger -Settings $settings -User "RDP" -Password "882188Adr" -RunLevel Highest -Force

    - name: Install Tailscale
      run: |
        $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi"
        $installerPath = "$env:TEMP\tailscale.msi"
        Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
        Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
        Remove-Item $installerPath -Force

    - name: Establish Tailscale Connection
      run: |
        & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
        $tsIP = $null
        for ($i=0; $i -lt 10; $i++) {
            $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
            if ($tsIP) { break }
            Start-Sleep -Seconds 5
        }
        if (-not $tsIP) { throw "No Tailscale IP found" }
        echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

    - name: Show Access Info
      run: |
        Write-Host "`n=== RDP ACCESS ==="
        Write-Host "Address: $env:TAILSCALE_IP"
        Write-Host "Username: RDP"
        Write-Host "Password: 882188Adr"
        Write-Host "üåé Regi√£o configurada: Brasil (pt-BR)"
        Write-Host "‚è∞ Fuso hor√°rio: Bras√≠lia (GMT-3)"
        Write-Host "‚å®Ô∏è Teclado: ABNT2"
        Write-Host "üñ•Ô∏è VS Code: Instalado"
        Write-Host "üîß Windows: Ultra Otimizado RDP"
        Write-Host "üì° Sistema de Ponto de Access: Ativo (2min)"
        Write-Host "‚úÖ GPU driver installed"
        Write-Host "‚úÖ Tailscale ready"
        Write-Host "==================`n"
        while ($true) {
            Start-Sleep -Seconds 300
        }
